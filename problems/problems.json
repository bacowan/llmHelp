{
    "problems": [
        {
            "Title": "CustomOnTheRightTrack",
            "RecommendedResponseRole": "on the right track, but need a little nudge",
            "Description": "Write a function in python which takes as input a list of integers and returns the largest one, without using the buitin max() function.\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19",
            "DescriptionJapanese": "組み込みのmax()という関数を使わずに、入力として整数のリストを受け取り、最大のものを返す関数をpythonで書いてください。\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19"
        },
        {
            "Title": "CustomNeedHelp",
            "RecommendedResponseRole": "really stuck",
            "Description": "Write a function in python which takes as input a list of integers and returns the largest one, without using the buitin max() function.\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19",
            "DescriptionJapanese": "組み込みのmax()という関数を使わずに、入力として整数のリストを受け取り、最大のものを返す関数をpythonで書いてください。\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19"
        },
        {
            "Title": "Easy",
            "RecommendedResponseRole": null,
            "Description": "Write a function in python which takes as input a list of integers and returns the largest one, without using the buitin max() function.\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19",
            "DescriptionJapanese": "組み込みのmax()という関数を使わずに、入力として整数のリストを受け取り、最大のものを返す関数をpythonで書いてください。\n\nExamples:\n\nInput : [1, 2, 3, 4, 5]\nOutput : 5\n\nInput : [-1, 19, 6, 19, 6, 6]\nOutput : 19"
        },
        {
            "Title": "Medium",
            "RecommendedResponseRole": null,
            "Description": "Implement insertion sort; it should take as input a list, modify the list in place, and return the sorted list.\n\nExamples:\n\nInput : [12, 11, 13, 5, 6]\nOutput : [5, 6, 11, 12, 13]\n\nInput : [5, -1, 0, -3]\nOutput : [-3, -1, 0, 5]",
            "DescriptionJapanese": "挿入ソートを実装してください。リストを入力として受け取り、in-placeでを変更し、ソートされたリストをリターンするべきです。\n\nExamples:\n\nInput : [12, 11, 13, 5, 6]\nOutput : [5, 6, 11, 12, 13]\n\nInput : [5, -1, 0, -3]\nOutput : [-3, -1, 0, 5]"
        },
        {
            "Title": "Difficult",
            "RecommendedResponseRole": null,
            "Description": "Implement a simple system to transfer funds between two bank accounts: use the given BankAccount class, finish the given `transfer` function (feel free to add code outside of the `transfer` function, but do not edit the `get_balance` or `set_balance` methods). The transfer function should subtract the amount to transfer from account_from's balance and add it to account_to's balance. The `transfer` function should be thread safe. Note that you should not call the `balance` member variable directly, but instead use the provided getter and setter.\n\nimport threading\nimport time\n\nclass BankAccount:\n\tdef __init__(self, balance):\n\t\tself.balance = balance\n\tdef get_balance(self):\n\t\tret = self.balance\n\t\t# simulate network delay\n\t\ttime.sleep(1)\n\t\treturn ret\n\tdef set_balance(self, val):\n\t\tself.balance = val\ndef transfer_funds(account_from, account_to, amount):\n\tpass",
            "DescriptionJapanese": "与えられたBankAccountクラスを使用して、与えられた`transfer`関数を完成させてください（自由で`transfer` 関数の外側にコードを編集してもいいですが、`get_balance`というメソッドと`set_balance`というメソッドを編集しないでください）。`transfer`という関数は、account_fromの残高から送金額を引き、account_toの残高に追加するべきです。`transfer`という関数はスレッドセーフでなければならなりません。`balance`というメンバ変数を直接使はず、提供されているゲッターとセッターを使用してください。\n\nimport threading\nimport time\n\nclass BankAccount:\n\tdef __init__(self, balance):\n\t\tself.balance = balance\n\tdef get_balance(self):\n\t\tret = self.balance\n\t\t# simulate network delay\n\t\ttime.sleep(1)\n\t\treturn ret\n\tdef set_balance(self, val):\n\t\tself.balance = val\ndef transfer_funds(account_from, account_to, amount):\n\tpass"
        }
    ]
}