1. Explain why a deadlock can occur in the following code:
import threading

lock1 = threading.Lock()
lock2 = threading.Lock()

def create_deadlock():
    with lock1:
        print("Thread 1 acquired lock 1")
        with lock2:
            print("Thread 1 acquired lock 2")

    with lock2:
        print("Thread 2 acquired lock 2")
        with lock1:
            print("Thread 2 acquired lock 1")

thread1 = threading.Thread(target=create_deadlock)
thread2 = threading.Thread(target=create_deadlock)

thread1.start()
thread2.start()

thread1.join()
thread2.join()


2. Explain why a race condition can occur in the following code:
import threading

class Counter:
    def __init__(self):
        self.count = 0

    def increment(self):
        self.count += 1

    def get_count(self):
        return self.count

counter = Counter()

def increment_counter():
    for _ in range(1000):
        counter.increment()

thread1 = threading.Thread(target=increment_counter)
thread2 = threading.Thread(target=increment_counter)

thread1.start()
thread2.start()

thread1.join()
thread2.join()

print("Final count:", counter.get_count())


3. What happens to the variable `lock` at the start of a block of code beginning with `with lock:`? 

4. What happens to the variable `lock` when the block of code beginning with `with lock:` exits?

5. Why might one want to add the use of multithreading in the following code?
import requests

def fetch_url(url):
    response = requests.get(url)
    print(f"Response from {url}: {response.status_code}")

urls = [
    "https://www.example.com",
    "https://www.google.com",
    "https://www.github.com"
]

for url in urls:
    fetch_url(url)