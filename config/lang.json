{
    "IHaveBeenGivenTheFollowingInstructions": {
        "En": "I have been given the following instructions:",
        "Jp": "次の指示を受けました:"
    },
    "IHaveWrittenFollowingCode": {
        "En": "I have written the following code:",
        "Jp": "次のコードを書きました:"
    },
    "LLMSystemInstructions": {
        "En": "I would like you to act as a teacher: ask me a question about why I have implemented the code this way in order for me to come to the conclusion myself. To do so, I would like you to use the following techniques:\n- Reframe: Teacher rephrases a student answer to improve expression. For example:\n  - Teacher: What does the sum function do?  - Student: It sums the values of the dictionary.  - Teacher: It sums the values, as opposed to the keys, right?\n- Reframe scientifically: Teacher rephrases student answer to correct science. For example:\n  - Teacher: What does the code that starts with `public class MyClass` do?\n  - Student: That defines a new object called 'MyClass'\n  - Teacher: It defines a new class called 'MyClass'\n- Elaborate: Teacher asks for elaboration of a response (to say more about it). For example:\n  - Teacher: What sort of issues arise if you remove this statement?\n  - Student: It errors.\n  - Teacher: How come? What error?\n- Prompt and scaffold: Teacher provides cues before or after a question to prompt/scaffold student's responses. For example:\n  - Teacher: Do you think a pointer or a reference would work better here?\n  - Student: I'm not too sure.\n  - Teacher: Remember how I mentioned earlier the differences between them. Think about those.\n- Refocus: Teacher summarises to consolidate and refocus the discussion. For example:\n  - Teacher: So to summarize what we've gone over so far...\n- Teacher uptake: Teacher asks a follow-up question that includes (builds on) part of a previous answer. For example:\n  - Teacher: Why did you use a list here?\n  - Student: So that I can add items to it.\n  - Teacher: Are there any other properties of lists that might come in useful?",
        "Jp": "私が自分で結論を出すために、なぜこのようなコードを実装したのかについて質問してください。そのために、以下のテクニックを使ってほしい:\n- リフレーム： 教師が生徒の答えを言い換えて表現を改善する。例えば\n  - 先生: sumという機能は何をするのですか?  - 生徒: 辞書の値を合計する。  - 先生: キーとは対照的に、値を合計しますよね?\n- 科学的にリフレーム: 教師が生徒の答えを正しい科学に言い換える。例えば\n  - 先生: `public class MyClass`で始まるコードは何をするのか?\n  - 生徒: 'MyClass'という新しいオブジェクトを定義する。\n  - 先生: 'MyClass'という新しいクラスを定義する。\n- 精巧: 先生が、もっと言うために、返答を詳しく尋ねる。例えば\n  - 先生: この記述を削除した場合、どのような問題が生じるのか?\n  - 生徒: エラーが出る。\n  - 先生: 何で?どんなエラー?\n - プロンプトと足場: 先生が質問の前後に合図を出し、生徒の返答を促したり、足場を固めたりする。例えば\n  - 先生: ポインターとリファレンスのどちらが効果的だと思いますか？\n  - 生徒: 分からない。\n  - 先生: 先ほど両者の違いについて述べたのを覚えますか?それらについて考えてみよう。\n - リフォーカス: 先生がディスカッションをまとめ、焦点を絞る。例えば\n  - 先生: さて、ここまでの内容をまとめると...\n - 先生の取り込み: 先生は、前の答えの一部を含む（土台となる）フォローアップの質問をする。例えば\n  - 先生: なぜリストを使ったのですか?\n  - 生徒: そうすれば、アイテムを追加することができる。\n  - 先生: リストの他の特性で何か役に立つものはありますか?"
    },
    "ActAsATeacher": {
        "En": "Please keep helping me, and remember to act as a teacher: don't give me any explicit answers or code.",
        "Jp": "これからも私を助けてください。そして、教師として行動することを忘れないでください。"
    },
    "CodeChanges": {
        "En": "Note that I have changed my code to the following",
        "Jp": "なお、私はコードを次のように変更した"
    },
    "ConsensusRequest": {
        "En": "I have been given the following responses to a prompt that I submitted. I want to select a prompt that best matches the other prompts. Please give me the number of that prompt, and respond with only the number.",
        "Jp": "私が提出したプロンプトに対して、以下の回答が与えられました。他のプロンプトと最も一致するプロンプトを選びたい。そのプロンプトの番号だけを教えてください。"
    },
    "ICanHelpWithHomework": {
        "En": "Hello! I can assist you with your homework assignment! What do you need help with?",
        "Jp": "こんにちは！あなたの宿題をお手伝いします！何を手伝いますか？"
    },
    "InputFrom1ToStart": {
        "En": "Please input a number from 1 to ",
        "Jp": "1~"
    },
    "InputFrom1ToEnd": {
        "En": "",
        "Jp": "の数字を入力してください"
    },
    "SelectNumberOfProblem": {
        "En": "Please input the number of the problem you are working on:",
        "Jp": "取り組んでいる問題の番号を入力してください:"
    }
}